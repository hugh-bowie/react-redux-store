{"version":3,"sources":["utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","utils/reducers.js","utils/store.js","utils/StoreContext.js","App.js","serviceWorker.js","index.js","assets/spinner.gif"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","dispatch","useDispatch","state","useSelector","image","name","price","quantity","cart","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","initialState","reducers","action","newState","createStore","StoreProvider","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.e0fee9fa.chunk.js","sourcesContent":["export function pluralize(name, count) {\r\n\tif (count === 1) {\r\n\t\treturn name;\r\n\t}\r\n\treturn name + 's';\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst request = window.indexedDB.open('shop-shop', 1);\r\n\t\tlet db, tx, store;\r\n\t\trequest.onupgradeneeded = function (e) {\r\n\t\t\tconst db = request.result;\r\n\t\t\tdb.createObjectStore('products', { keyPath: '_id' });\r\n\t\t\tdb.createObjectStore('categories', { keyPath: '_id' });\r\n\t\t\tdb.createObjectStore('cart', { keyPath: '_id' });\r\n\t\t};\r\n\r\n\t\trequest.onerror = function (e) {\r\n\t\t\tconsole.log('There was an error');\r\n\t\t};\r\n\r\n\t\trequest.onsuccess = function (e) {\r\n\t\t\tdb = request.result;\r\n\t\t\ttx = db.transaction(storeName, 'readwrite');\r\n\t\t\tstore = tx.objectStore(storeName);\r\n\r\n\t\t\tdb.onerror = function (e) {\r\n\t\t\t\tconsole.log('error', e);\r\n\t\t\t};\r\n\r\n\t\t\tswitch (method) {\r\n\t\t\t\tcase 'put':\r\n\t\t\t\t\tstore.put(object);\r\n\t\t\t\t\tresolve(object);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'get':\r\n\t\t\t\t\tconst all = store.getAll();\r\n\t\t\t\t\tall.onsuccess = function () {\r\n\t\t\t\t\t\tresolve(all.result);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'delete':\r\n\t\t\t\t\tstore.delete(object._id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log('No valid method');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\ttx.oncomplete = function () {\r\n\t\t\t\tdb.close();\r\n\t\t\t};\r\n\t\t};\r\n\t});\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { pluralize } from '../../utils/helpers';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction ProductItem(item) {\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector(state => state);\r\n\r\n\tconst { image, name, _id, price, quantity } = item;\r\n\r\n\tconst { cart } = state;\r\n\r\n\tconst addToCart = () => {\r\n\t\tconst itemInCart = cart.find(cartItem => cartItem._id === _id);\r\n\t\tif (itemInCart) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\r\n\t\t\t\t_id: _id,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t\tidbPromise('cart', 'put', {\r\n\t\t\t\t...itemInCart,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ADD_TO_CART,\r\n\t\t\t\tproduct: { ...item, purchaseQuantity: 1 },\r\n\t\t\t});\r\n\t\t\tidbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='card px-1 py-1'>\r\n\t\t\t<Link to={`/products/${_id}`}>\r\n\t\t\t\t<img alt={name} src={`/images/${image}`} />\r\n\t\t\t\t<p>{name}</p>\r\n\t\t\t</Link>\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{quantity} {pluralize('item', quantity)} in stock\r\n\t\t\t\t</div>\r\n\t\t\t\t<span>${price}</span>\r\n\t\t\t</div>\r\n\t\t\t<button onClick={addToCart}>Add to cart</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ProductItem;\r\n","export const UPDATE_PRODUCTS = 'UPDATE_PRODUCTS';\r\n\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';\r\n\r\nexport const UPDATE_CATEGORIES = 'UPDATE_CATEGORIES';\r\nexport const UPDATE_CURRENT_CATEGORY = 'UPDATE_CURRENT_CATEGORY';\r\n","//import gql from 'graphql-tag';\r\nimport { gql } from '@apollo/client';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n{\r\n  categories {\r\n    _id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n{\r\n  user {\r\n    firstName\r\n    lastName\r\n    orders {\r\n      _id\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        image\r\n      }\r\n    }\r\n  }\r\n}\r\n`;","import React, { useEffect } from 'react';\r\nimport ProductItem from '../ProductItem';\r\n// import { useStoreContext } from '../../utils/GlobalState';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_PRODUCTS } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport spinner from '../../assets/spinner.gif';\r\n\r\nfunction ProductList() {\r\n\t//const [state, dispatch] = useStoreContext();\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector(state => state);\r\n\r\n\tconst { currentCategory } = state;\r\n\r\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (data) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\tproducts: data.products,\r\n\t\t\t});\r\n\t\t\tdata.products.forEach(product => {\r\n\t\t\t\tidbPromise('products', 'put', product);\r\n\t\t\t});\r\n\t\t} else if (!loading) {\r\n\t\t\tidbPromise('products', 'get').then(products => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\t\tproducts: products,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}, [data, loading, dispatch]);\r\n\r\n\tfunction filterProducts() {\r\n\t\tif (!currentCategory) {\r\n\t\t\treturn state.products;\r\n\t\t}\r\n\r\n\t\treturn state.products.filter(product => product.category._id === currentCategory);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='my-2'>\r\n\t\t\t<h2>Our Products:</h2>\r\n\t\t\t{state.products.length ? (\r\n\t\t\t\t<div className='flex-row'>\r\n\t\t\t\t\t{filterProducts().map(product => (\r\n\t\t\t\t\t\t<ProductItem key={product._id} _id={product._id} image={product.image} name={product.name} price={product.price} quantity={product.quantity} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<h3>You haven't added any products yet!</h3>\r\n\t\t\t)}\r\n\t\t\t{loading ? <img src={spinner} alt='loading' /> : null}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction CategoryMenu() {\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector(state => state);\r\n\r\n\tconst { categories } = state;\r\n\r\n\tconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n\tuseEffect(() => {\r\n\t\t//// if categoryData exists or has changed from the response of useQuery, then run dispatch() ////\r\n\t\tif (categoryData) {\r\n\t\t\t///// execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to ////\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CATEGORIES,\r\n\t\t\t\tcategories: categoryData.categories,\r\n\t\t\t});\r\n\t\t\tcategoryData.categories.forEach(category => {\r\n\t\t\t\tidbPromise('categories', 'put', category);\r\n\t\t\t});\r\n\t\t} else if (!loading) {\r\n\t\t\tidbPromise('categories', 'get').then(categories => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_CATEGORIES,\r\n\t\t\t\t\tcategories: categories,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}, [categoryData, loading, dispatch]);\r\n\r\n\tconst handleClick = id => {\r\n\t\tdispatch({\r\n\t\t\ttype: UPDATE_CURRENT_CATEGORY,\r\n\t\t\tcurrentCategory: id,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Choose a Category:</h2>\r\n\t\t\t{categories.map(item => (\r\n\t\t\t\t<button\r\n\t\t\t\t\tkey={item._id}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\thandleClick(item._id);\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t{item.name}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst CartItem = ({ item }) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst removeFromCart = item => {\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_FROM_CART,\r\n\t\t\t_id: item._id,\r\n\t\t});\r\n\t\tidbPromise('cart', 'delete', { ...item });\r\n\t};\r\n\r\n\tconst onChange = e => {\r\n\t\tconst value = e.target.value;\r\n\t\tif (value === '0') {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: REMOVE_FROM_CART,\r\n\t\t\t\t_id: item._id,\r\n\t\t\t});\r\n\t\t\tidbPromise('cart', 'delete', { ...item });\r\n\t\t} else {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\r\n\t\t\t\t_id: item._id,\r\n\t\t\t\tpurchaseQuantity: parseInt(value),\r\n\t\t\t});\r\n\t\t\tidbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='flex-row'>\r\n\t\t\t<div>\r\n\t\t\t\t<img src={`/images/${item.image}`} alt='' />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{item.name}, ${item.price}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>Qty:</span>\r\n\t\t\t\t\t<input type='number' placeholder='1' value={item.purchaseQuantity} onChange={onChange} />\r\n\t\t\t\t\t<span role='img' aria-label='trash' onClick={() => removeFromCart(item)}>\r\n\t\t\t\t\t\t🗑️\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CartItem;\r\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n\tgetProfile() {\r\n\t\treturn decode(this.getToken());\r\n\t}\r\n\r\n\tloggedIn() {\r\n\t\t// Checks if there is a saved token and it's still valid\r\n\t\tconst token = this.getToken();\r\n\t\treturn !!token && !this.isTokenExpired(token);\r\n\t}\r\n\r\n\tisTokenExpired(token) {\r\n\t\ttry {\r\n\t\t\tconst decoded = decode(token);\r\n\t\t\tif (decoded.exp < Date.now() / 1000) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else return false;\r\n\t\t} catch (err) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tgetToken() {\r\n\t\t// Retrieves the user token from localStorage\r\n\t\treturn localStorage.getItem('id_token');\r\n\t}\r\n\r\n\tlogin(idToken) {\r\n\t\t// Saves user token to localStorage\r\n\t\tlocalStorage.setItem('id_token', idToken);\r\n\r\n\t\twindow.location.assign('/');\r\n\t}\r\n\r\n\tlogout() {\r\n\t\t// Clear user token and profile data from localStorage\r\n\t\tlocalStorage.removeItem('id_token');\r\n\t\t// this will reload the page and reset the state of the application\r\n\t\twindow.location.assign('/');\r\n\t}\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport './style.css';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector(state => state);\r\n\tconst [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (data) {\r\n\t\t\tstripePromise.then(res => {\r\n\t\t\t\tres.redirectToCheckout({ sessionId: data.checkout.session });\r\n\t\t\t});\r\n\t\t}\r\n\t}, [data]);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function getCart() {\r\n\t\t\tconst cart = await idbPromise('cart', 'get');\r\n\t\t\tdispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n\t\t}\r\n\r\n\t\tif (!state.cart.length) {\r\n\t\t\tgetCart();\r\n\t\t}\r\n\t}, [state.cart.length, dispatch]);\r\n\r\n\tfunction toggleCart() {\r\n\t\tdispatch({ type: TOGGLE_CART });\r\n\t}\r\n\r\n\tfunction calculateTotal() {\r\n\t\tlet sum = 0;\r\n\t\tstate.cart.forEach(item => {\r\n\t\t\tsum += item.price * item.purchaseQuantity;\r\n\t\t});\r\n\t\treturn sum.toFixed(2);\r\n\t}\r\n\r\n\tfunction submitCheckout() {\r\n\t\tconst productIds = [];\r\n\r\n\t\tstate.cart.forEach(item => {\r\n\t\t\tfor (let i = 0; i < item.purchaseQuantity; i++) {\r\n\t\t\t\tproductIds.push(item._id);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tgetCheckout({\r\n\t\t\tvariables: { products: productIds },\r\n\t\t});\r\n\t}\r\n\r\n\tif (!state.cartOpen) {\r\n\t\treturn (\r\n\t\t\t<div className='cart-closed' onClick={toggleCart}>\r\n\t\t\t\t<span role='img' aria-label='trash'>\r\n\t\t\t\t\t🛒\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='cart'>\r\n\t\t\t<div className='close' onClick={toggleCart}>\r\n\t\t\t\t[close]\r\n\t\t\t</div>\r\n\t\t\t<h2>Shopping Cart</h2>\r\n\t\t\t{state.cart.length ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{state.cart.map(item => (\r\n\t\t\t\t\t\t<CartItem key={item._id} item={item} />\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t<div className='flex-row space-between'>\r\n\t\t\t\t\t\t<strong>Total: ${calculateTotal()}</strong>\r\n\r\n\t\t\t\t\t\t{Auth.loggedIn() ? <button onClick={submitCheckout}>Checkout</button> : <span>(log in to check out)</span>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<h3>\r\n\t\t\t\t\t<span role='img' aria-label='shocked'>\r\n\t\t\t\t\t\t😱\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\tYou haven't added anything to your cart yet!\r\n\t\t\t\t</h3>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Cart;\r\n","import React from 'react';\r\nimport ProductList from '../components/ProductList';\r\nimport CategoryMenu from '../components/CategoryMenu';\r\nimport Cart from '../components/Cart';\r\n\r\nconst Home = () => {\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<CategoryMenu />\r\n\t\t\t<ProductList />\r\n\t\t\t<Cart />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport Cart from '../components/Cart';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n//import { useStoreContext } from '../utils/GlobalState';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\r\nimport { QUERY_PRODUCTS } from '../utils/queries';\r\nimport { idbPromise } from '../utils/helpers';\r\nimport spinner from '../assets/spinner.gif';\r\n\r\nfunction Detail() {\r\n\tconst dispatch = useDispatch();\r\n\tconst state = useSelector(state => state);\r\n\tconst { id } = useParams();\r\n\r\n\tconst [currentProduct, setCurrentProduct] = useState({});\r\n\r\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n\tconst { products, cart } = state;\r\n\r\n\tuseEffect(() => {\r\n\t\t// already in global store\r\n\t\tif (products.length) {\r\n\t\t\tsetCurrentProduct(products.find(product => product._id === id));\r\n\t\t}\r\n\t\t// retrieved from server\r\n\t\telse if (data) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\tproducts: data.products,\r\n\t\t\t});\r\n\r\n\t\t\tdata.products.forEach(product => {\r\n\t\t\t\tidbPromise('products', 'put', product);\r\n\t\t\t});\r\n\t\t}\r\n\t\t// get cache from idb\r\n\t\telse if (!loading) {\r\n\t\t\tidbPromise('products', 'get').then(indexedProducts => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\r\n\t\t\t\t\tproducts: indexedProducts,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}, [products, data, loading, dispatch, id]);\r\n\r\n\tconst addToCart = () => {\r\n\t\tconst itemInCart = cart.find(cartItem => cartItem._id === id);\r\n\t\tif (itemInCart) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\r\n\t\t\t\t_id: id,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t\tidbPromise('cart', 'put', {\r\n\t\t\t\t...itemInCart,\r\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ADD_TO_CART,\r\n\t\t\t\tproduct: { ...currentProduct, purchaseQuantity: 1 },\r\n\t\t\t});\r\n\t\t\tidbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n\t\t}\r\n\t};\r\n\r\n\tconst removeFromCart = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_FROM_CART,\r\n\t\t\t_id: currentProduct._id,\r\n\t\t});\r\n\r\n\t\tidbPromise('cart', 'delete', { ...currentProduct });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{currentProduct && cart ? (\r\n\t\t\t\t<div className='container my-1'>\r\n\t\t\t\t\t<Link to='/'>← Back to Products</Link>\r\n\r\n\t\t\t\t\t<h2>{currentProduct.name}</h2>\r\n\r\n\t\t\t\t\t<p>{currentProduct.description}</p>\r\n\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<strong>Price:</strong>${currentProduct.price} <button onClick={addToCart}>Add to Cart</button>\r\n\t\t\t\t\t\t<button disabled={!cart.find(p => p._id === currentProduct._id)} onClick={removeFromCart}>\r\n\t\t\t\t\t\t\tRemove from Cart\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t<img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\r\n\t\t\t\t</div>\r\n\t\t\t) : null}\r\n\t\t\t{loading ? <img src={spinner} alt='loading' /> : null}\r\n\t\t\t<Cart />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\n\r\nfunction Jumbotron({ children }) {\r\n\treturn <div style={{ height: 560, clear: 'both', paddingTop: 120, textAlign: 'center' }}>{children}</div>;\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from 'react';\r\nimport Jumbotron from '../components/Jumbotron';\r\n\r\nconst NoMatch = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Jumbotron>\r\n\t\t\t\t<h1>404 Page Not Found</h1>\r\n\t\t\t\t<h1>\r\n\t\t\t\t\t<span role='img' aria-label='Face With Rolling Eyes Emoji'>\r\n\t\t\t\t\t\t🙄\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</h1>\r\n\t\t\t</Jumbotron>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default NoMatch;\r\n","//import gql from 'graphql-tag';\r\nimport { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n\tmutation login($email: String!, $password: String!) {\r\n\t\tlogin(email: $email, password: $password) {\r\n\t\t\ttoken\r\n\t\t\tuser {\r\n\t\t\t\t_id\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n\tmutation addOrder($products: [ID]!) {\r\n\t\taddOrder(products: $products) {\r\n\t\t\tpurchaseDate\r\n\t\t\tproducts {\r\n\t\t\t\t_id\r\n\t\t\t\tname\r\n\t\t\t\tdescription\r\n\t\t\t\tprice\r\n\t\t\t\tquantity\r\n\t\t\t\tcategory {\r\n\t\t\t\t\tname\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n\tmutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\r\n\t\taddUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\r\n\t\t\ttoken\r\n\t\t\tuser {\r\n\t\t\t\t_id\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n\tconst [formState, setFormState] = useState({ email: '', password: '' });\r\n\tconst [login, { error }] = useMutation(LOGIN);\r\n\r\n\tconst handleFormSubmit = async event => {\r\n\t\tevent.preventDefault();\r\n\t\ttry {\r\n\t\t\tconst mutationResponse = await login({\r\n\t\t\t\tvariables: { email: formState.email, password: formState.password },\r\n\t\t\t});\r\n\t\t\tconst token = mutationResponse.data.login.token;\r\n\t\t\tAuth.login(token);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleChange = event => {\r\n\t\tconst { name, value } = event.target;\r\n\t\tsetFormState({\r\n\t\t\t...formState,\r\n\t\t\t[name]: value,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='container my-1'>\r\n\t\t\t<Link to='/signup'>← Go to Signup</Link>\r\n\r\n\t\t\t<h2>Login</h2>\r\n\t\t\t<form onSubmit={handleFormSubmit}>\r\n\t\t\t\t<div className='flex-row space-between my-2'>\r\n\t\t\t\t\t<label htmlFor='email'>Email address:</label>\r\n\t\t\t\t\t<input placeholder='anyValidEmail@me.com' name='email' type='email' id='email' onChange={handleChange} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='flex-row space-between my-2'>\r\n\t\t\t\t\t<label htmlFor='pwd'>Password:</label>\r\n\t\t\t\t\t<input placeholder='******' name='password' type='password' id='pwd' onChange={handleChange} />\r\n\t\t\t\t</div>\r\n\t\t\t\t{error ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p className='error-text'>The provided credentials are incorrect</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t\t<div className='flex-row flex-end'>\r\n\t\t\t\t\t<button type='submit'>Submit</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n\tconst [formState, setFormState] = useState({ email: '', password: '' });\r\n\tconst [addUser] = useMutation(ADD_USER);\r\n\r\n\tconst handleFormSubmit = async event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst mutationResponse = await addUser({\r\n\t\t\tvariables: {\r\n\t\t\t\temail: formState.email,\r\n\t\t\t\tpassword: formState.password,\r\n\t\t\t\tfirstName: formState.firstName,\r\n\t\t\t\tlastName: formState.lastName,\r\n\t\t\t},\r\n\t\t});\r\n\t\tconst token = mutationResponse.data.addUser.token;\r\n\t\tAuth.login(token);\r\n\t};\r\n\r\n\tconst handleChange = event => {\r\n\t\tconst { name, value } = event.target;\r\n\t\tsetFormState({\r\n\t\t\t...formState,\r\n\t\t\t[name]: value,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='container my-1'>\r\n\t\t\t<Link to='/login'>← Go to Login</Link>\r\n\r\n\t\t\t<h2>Signup</h2>\r\n\t\t\t<form onSubmit={handleFormSubmit}>\r\n\t\t\t\t<div className='flex-row space-between my-2'>\r\n\t\t\t\t\t<label htmlFor='firstName'>First Name:</label>\r\n\t\t\t\t\t<input placeholder='First' name='firstName' type='firstName' id='firstName' onChange={handleChange} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='flex-row space-between my-2'>\r\n\t\t\t\t\t<label htmlFor='lastName'>Last Name:</label>\r\n\t\t\t\t\t<input placeholder='Last' name='lastName' type='lastName' id='lastName' onChange={handleChange} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='flex-row space-between my-2'>\r\n\t\t\t\t\t<label htmlFor='email'>Email:</label>\r\n\t\t\t\t\t<input placeholder='youremail@test.com' name='email' type='email' id='email' onChange={handleChange} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='flex-row space-between my-2'>\r\n\t\t\t\t\t<label htmlFor='pwd'>Password:</label>\r\n\t\t\t\t\t<input placeholder='******' name='password' type='password' id='pwd' onChange={handleChange} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='flex-row flex-end'>\r\n\t\t\t\t\t<button type='submit'>Submit</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Signup;\r\n","import React from 'react';\r\nimport Auth from '../../utils/auth';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n\tfunction showNavigation() {\r\n\t\tif (Auth.loggedIn()) {\r\n\t\t\treturn (\r\n\t\t\t\t<ul className='flex-row'>\r\n\t\t\t\t\t<li className='mx-1'>\r\n\t\t\t\t\t\t<Link to='/orderHistory'>Order History</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className='mx-1'>\r\n\t\t\t\t\t\t{/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n\t\t\t\t\t\t<a href='/' onClick={() => Auth.logout()}>\r\n\t\t\t\t\t\t\tLogout\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<ul className='flex-row'>\r\n\t\t\t\t\t<li className='mx-1'>\r\n\t\t\t\t\t\t<Link to='/signup'>Signup</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className='mx-1'>\r\n\t\t\t\t\t\t<Link to='/login'>Login</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<header className='flex-row px-1'>\r\n\t\t\t<h1>\r\n\t\t\t\t<Link to='/'>\r\n\t\t\t\t\t<span role='img' aria-label='shopping bag'>\r\n\t\t\t\t\t\t🛍️\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t-Shop-Shop\r\n\t\t\t\t</Link>\r\n\t\t\t</h1>\r\n\r\n\t\t\t<nav>{showNavigation()}</nav>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success() {\r\n\tconst [addOrder] = useMutation(ADD_ORDER);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function saveOrder() {\r\n\t\t\tconst cart = await idbPromise('cart', 'get');\r\n\t\t\tconst products = cart.map(item => item._id);\r\n\r\n\t\t\tif (products.length) {\r\n\t\t\t\tconst { data } = await addOrder({ variables: { products } });\r\n\t\t\t\tconst productData = data.addOrder.products;\r\n\r\n\t\t\t\tproductData.forEach(item => {\r\n\t\t\t\t\tidbPromise('cart', 'delete', item);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\twindow.location.assign('/');\r\n\t\t\t}, 3000);\r\n\t\t}\r\n\r\n\t\tsaveOrder();\r\n\t}, [addOrder]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Jumbotron>\r\n\t\t\t\t<h1>Success!</h1>\r\n\t\t\t\t<h2>Thank you for your purchase!</h2>\r\n\t\t\t\t<h2>You will now be redirected to the home page</h2>\r\n\t\t\t</Jumbotron>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Success;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n\tconst { data } = useQuery(QUERY_USER);\r\n\tlet user;\r\n\r\n\tif (data) {\r\n\t\tuser = data.user;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className='container my-1'>\r\n\t\t\t\t<Link to='/'>← Back to Products</Link>\r\n\r\n\t\t\t\t{user ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<h2>\r\n\t\t\t\t\t\t\tOrder History for {user.firstName} {user.lastName}\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t{user.orders.map(order => (\r\n\t\t\t\t\t\t\t<div key={order._id} className='my-2'>\r\n\t\t\t\t\t\t\t\t<h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\r\n\t\t\t\t\t\t\t\t<div className='flex-row'>\r\n\t\t\t\t\t\t\t\t\t{order.products.map(({ _id, image, name, price }, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<div key={index} className='card px-1 py-1'>\r\n\t\t\t\t\t\t\t\t\t\t\t<Link to={`/products/${_id}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<img alt={name} src={`/images/${image}`} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>{name}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span>${price}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default OrderHistory;\r\n","//import { useReducer } from \"react\";\r\nimport { UPDATE_PRODUCTS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from './actions';\r\n\r\nconst initialState = {\r\n\tproducts: [],\r\n\tcart: [],\r\n\tcartOpen: false,\r\n\tcategories: [],\r\n\tcurrentCategory: '',\r\n};\r\n\r\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\r\nexport const reducers = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\t// Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\r\n\t\tcase UPDATE_PRODUCTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tproducts: [...action.products],\r\n\t\t\t};\r\n\r\n\t\tcase ADD_TO_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: true,\r\n\t\t\t\tcart: [...state.cart, action.product],\r\n\t\t\t};\r\n\t\tcase ADD_MULTIPLE_TO_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcart: [...state.cart, ...action.products],\r\n\t\t\t};\r\n\t\t// Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\r\n\t\t// If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\r\n\t\tcase UPDATE_CART_QUANTITY:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: true,\r\n\t\t\t\tcart: state.cart.map(product => {\r\n\t\t\t\t\tif (action._id === product._id) {\r\n\t\t\t\t\t\tproduct.purchaseQuantity = action.purchaseQuantity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}),\r\n\t\t\t};\r\n\r\n\t\t// First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\r\n\t\t// If so, we remove it from our cart and set the updated state to a variable called `newState`\r\n\t\tcase REMOVE_FROM_CART:\r\n\t\t\tlet newState = state.cart.filter(product => {\r\n\t\t\t\treturn product._id !== action._id;\r\n\t\t\t});\r\n\r\n\t\t\t// Then we return a copy of state and check to see if the cart is empty.\r\n\t\t\t// If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: newState.length > 0,\r\n\t\t\t\tcart: newState,\r\n\t\t\t};\r\n\r\n\t\tcase CLEAR_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: false,\r\n\t\t\t\tcart: [],\r\n\t\t\t};\r\n\r\n\t\tcase TOGGLE_CART:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartOpen: !state.cartOpen,\r\n\t\t\t};\r\n\r\n\t\tcase UPDATE_CATEGORIES:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcategories: [...action.categories],\r\n\t\t\t};\r\n\r\n\t\tcase UPDATE_CURRENT_CATEGORY:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrentCategory: action.currentCategory,\r\n\t\t\t};\r\n\r\n\t\t// Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\r\n\t\t// This saves us from a crash.\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default reducers;\r\n","import { createStore } from 'redux';\r\nimport reducers from './reducers';\r\n\r\nexport default createStore(reducers);\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './store';\r\n\r\nexport default function StoreProvider(props) {\r\n\t// Return the provider component provided by react-redux\r\n\treturn <Provider store={store} {...props} />;\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport Home from './pages/Home';\r\nimport Detail from './pages/Detail';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Nav from './components/Nav';\r\nimport Success from './pages/Success';\r\nimport OrderHistory from './pages/OrderHistory';\r\nimport StoreProvider from './utils/StoreContext';\r\n\r\nconst httpLink = createHttpLink({\r\n\turi: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n\tconst token = localStorage.getItem('id_token');\r\n\treturn {\r\n\t\theaders: {\r\n\t\t\t...headers,\r\n\t\t\tauthorization: token ? `Bearer ${token}` : '',\r\n\t\t},\r\n\t};\r\n});\r\n\r\nconst client = new ApolloClient({\r\n\tlink: authLink.concat(httpLink),\r\n\tcache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<ApolloProvider client={client}>\r\n\t\t\t<Router>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<StoreProvider>\r\n\t\t\t\t\t\t<Nav />\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route exact path='/' component={Home} />\r\n\t\t\t\t\t\t\t<Route exact path='/login' component={Login} />\r\n\t\t\t\t\t\t\t<Route exact path='/signup' component={Signup} />\r\n\t\t\t\t\t\t\t<Route exact path='/success' component={Success} />\r\n\t\t\t\t\t\t\t<Route exact path='/orderHistory' component={OrderHistory} />\r\n\t\t\t\t\t\t\t<Route exact path='/products/:id' component={Detail} />\r\n\t\t\t\t\t\t\t<Route component={NoMatch} />\r\n\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t</StoreProvider>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t</ApolloProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//redux\r\nimport store from './utils/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}